---
- name: "secrets : get user home dir."
  become: yes
  getent:
    database: passwd
    key: "{{ jenkins_casc_owner }}"
    split: ":"

- name: "secrets : set user home dir."
  set_fact:
    _secrets_home_dir: "{{ getent_passwd[jenkins_casc_owner][4] }}"
  failed_when: _secrets_home_dir | length = 0

- name: "secrets : create secrets dir."
  file:
    path: "{{ jenkins_casc_secrets_dir }}"
    state: directory
    owner: "{{ jenkins_casc_owner }}"
    group: "{{ jenkins_casc_group }}"
    mode: 0700

- name: "secrets : deploy secret."
  copy:
    dest: "{{ jenkins_casc_secrets_dir }}/{{ secret.id }}"
    content: "{{ secret.value }}"
    owner: "{{ jenkins_casc_owner }}"
    group: "{{ jenkins_casc_group }}"
    mode: 0600
  loop_control:
    loop_var: secret
  with_items: "{{ jenkins_casc_secrets }}"
  no_log: "{{ jenkins_casc_no_log }}"

- name: "secrets : unmanaged."
  block:
    - name: "secrets : unmanaged : find files in {{ jenkins_casc_secrets_dir }}."
      find:
        paths: "{{ jenkins_casc_secrets_dir }}"
      register: _jenkins_casc_secrets_existing_files

    - debug:
        var: _jenkins_casc_secrets_existing_files.files | map(attribute='path') | map('basename') | list

    - debug:
        var: jenkins_casc_secrets | map(attribute='id') | list

    - name: "secrets : unmanaged : delete unmanaged secrets."
      file:
        path: "{{ jenkins_casc_secrets_dir }}/{{ item }}"
        state: absent
      with_items: "{{ _jenkins_casc_secrets_existing_files.files | map(attribute='path') | map('basename') | list
                          | difference(jenkins_casc_secrets | map(attribute='id') | list) }}"

  when: jenkins_casc_secrets_unmanaged_delete

- name: "secrets : configure secrets env var."
  blockinfile:
    dest: "{{ _secrets_home_dir }}/.profile"
    create: yes
    owner: "{{ jenkins_casc_owner }}"
    group: "{{ jenkins_casc_group }}"
    marker: "# {mark} managed by {{ ansible_role_name }}"
    mode: 0640
    block:
      export SECRETS={{ jenkins_casc_secrets_dir }}
  register: _profile_result

- name: Restart Jenkins when required.  # noqa 503
  include_role:
    name: wcm_io_devops.jenkins_service
  vars:
    jenkins_service_state: "restarted"
    jenkins_service_admin_username: "{{ jenkins_casc_admin_username }}"
    jenkins_service_admin_password: "{{ jenkins_casc_admin_password }}"
  when:
    - _profile_result.changed
